apply plugin: 'maven'
apply plugin: 'signing'

//signing {
//    sign configurations.archives
//}



Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load( inputStream )
//读取字段
def ossrhUsername = properties.getProperty( 'ossrhUsername' )
def ossrhPassword = properties.getProperty( 'ossrhPassword' )
printf(ossrhUsername)
printf(ossrhPassword)

group = GROUP
archivesBaseName = ARCHIVES_BASE_NAME
version = VERSION


//声明变量记录上传Maven库地址
def repositoryUrl
//判断发到正式库还是snapshot库
if (isReleaseBuild()) {
    println 'Release Build'
} else {
    println 'Debug Build'
}

//通过gradle.properties中VERSION_NAME常量判断是否是Release版本
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

// 进行数字签名
signing {
    required { isReleaseBuild()  && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: RELEASE_REPOSITORY_URL) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                //库名称
                name POM_NAME
                //打包下载上传的格式
                packaging POM_PACKAGING
                //描述信息
                description POM_DESCRIPTION

                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        //license用于法律上的名称
                        name POM_LICENCE_NAME
                        //官方的license正文页面的URL
                        url POM_LICENCE_URL
                        //<!--项目分发的主要方式： repo，可以从Maven库下载
                        //manual， 用户必须手动下载和安装依赖-->
//                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                    }
                }
            }
        }
    }
}
